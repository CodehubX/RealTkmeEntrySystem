/*
 * Copyright (c) FOREVER, Jefferson Buot. All rights reserved.
 * Build | Imagine | Think | Explore -> By: Jeff 
 */
package artemis.sched_board_module;

import artemis.classes.Classroom;
import artemis.classes.QueryData;
import artemis.dialogs.ArtemisConfirm;
import artemis.panels.AddSchedule;
import com.alee.extended.date.WebCalendar;
import com.alee.extended.panel.WebCollapsiblePane;
import com.alee.laf.checkbox.WebCheckBox;
import com.alee.managers.hotkey.ButtonHotkeyRunnable;
import com.alee.managers.hotkey.Hotkey;
import com.alee.managers.hotkey.HotkeyManager;
import com.alee.managers.language.data.TooltipWay;
import com.alee.managers.tooltip.TooltipManager;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.SwingConstants;

/**
 *
 * @author Jefferson
 */
public abstract class SchedulingBoard extends javax.swing.JPanel {

    int state;
    DrawBoard board;
    String sy;
    String instituteId;
    Component parent;
    boolean d = false;
    JMenuItem menuPinSched;
    JMenuItem menuRemoveSched;
    ScheduleBoardUpdater scheduleBoardUpdater;
    JPopupMenu popup = new JPopupMenu();
    String selectedInstitute = "Over All";
    String selectedDay = "Monday";

    /**
     * Creates new form SchedulingBoard
     *
     * @param parent
     * @param instituteId
     * @param sy
     * @param scheduleBoardUpdater
     */
    public SchedulingBoard(Component parent, String instituteId, String sy, ScheduleBoardUpdater scheduleBoardUpdater) {
        this.parent = parent;
        this.sy = sy;
        this.scheduleBoardUpdater = scheduleBoardUpdater;
        initComponents();
        initPopups();
        this.instituteId = instituteId;
        scroll.getVerticalScrollBar().setUnitIncrement(20);
        scroll.getHorizontalScrollBar().setUnitIncrement(20);
        scroll.validate();

        board = new DrawBoard(scroll) {

            @Override
            public void canvasMouseClicked(MouseEvent evt) {
                boardClicked(evt);
            }

            @Override
            public void selectionChange() {
                popup.setVisible(false);
            }

        };
        scroll.setViewportView(board);
        setInstituteList(scheduleBoardUpdater.getBlu().getListInstitutes());
        d = true;
        WebCollapsiblePane leftPane = new WebCollapsiblePane(new ImageIcon(
                getClass().getResource("/artemis/img/settings_small.png")), "Settings", panelSettings);
        leftPane.setTitlePanePostion(SwingConstants.RIGHT);
        cont.add(leftPane);

        HotkeyManager.registerHotkey(parent, btnShowSched, Hotkey.ALT_ENTER, new ButtonHotkeyRunnable(btnShowSched, 50), TooltipWay.trailing);
        TooltipManager.setTooltip(btnShowSched, "Execute show schedule.", TooltipWay.trailing, 0);
        HotkeyManager.registerHotkey(parent, leftPane.getExpandButton(), Hotkey.ALT_E, new ButtonHotkeyRunnable(leftPane.getExpandButton(), 50), TooltipWay.trailing);
        Calendar dateTime = Calendar.getInstance();
        lblDate.setText(String.format("%1$tA, %1$tB %1$td, %1$tY\n", dateTime));
        scroll.getVerticalScrollBar().addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            @Override
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                board.changeHeaderPos(scroll.getVerticalScrollBar().getValue());
            }
        });

        scroll.getHorizontalScrollBar().addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            @Override
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                board.changeSideHeaderPos(scroll.getHorizontalScrollBar().getValue());
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelSettings = new javax.swing.JPanel();
        cmbDay = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        cmbInstitute = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        cal = new javax.swing.JPanel();
        lblDate = new javax.swing.JLabel();
        checkShowTooltip = new com.alee.laf.checkbox.WebCheckBox();
        btnShowSched = new com.alee.laf.button.WebButton();
        chkAutoUpdate = new com.alee.laf.checkbox.WebCheckBox();
        scroll = new JScrollPane();
        cont = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();

        panelSettings.setBackground(new java.awt.Color(91, 91, 91));

        cmbDay.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cmbDay.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" }));
        cmbDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDayActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Day:");

        cmbInstitute.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cmbInstitute.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Over All" }));
        cmbInstitute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbInstituteActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Facilitator:");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/artemis/img/settings.png"))); // NOI18N

        jPanel1.setBackground(new java.awt.Color(51, 153, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 19, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel3.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Morning Schedule");

        jLabel5.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Afternoon Schedule");

        jPanel3.setBackground(new java.awt.Color(0, 102, 153));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 19, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel6.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Evening Schedule");

        jPanel4.setBackground(new java.awt.Color(0, 51, 102));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 19, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        cal.setLayout(new javax.swing.BoxLayout(cal, javax.swing.BoxLayout.LINE_AXIS));
        cal.add( new WebCalendar(new Date()));

        lblDate.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        lblDate.setForeground(new java.awt.Color(255, 255, 255));
        lblDate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDate.setText(" ");

        checkShowTooltip.setForeground(new java.awt.Color(255, 255, 255));
        checkShowTooltip.setText("Show Map Tooltip");
        checkShowTooltip.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        checkShowTooltip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkShowTooltipActionPerformed(evt);
            }
        });

        btnShowSched.setIcon(new javax.swing.ImageIcon(getClass().getResource("/artemis/img/execute.png"))); // NOI18N
        btnShowSched.setText("Show Schedule");
        btnShowSched.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnShowSched.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnShowSched.setShadeWidth(0);
        btnShowSched.setVisible(false);
        btnShowSched.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowSchedActionPerformed(evt);
            }
        });

        chkAutoUpdate.setForeground(new java.awt.Color(255, 255, 255));
        chkAutoUpdate.setSelected(true);
        chkAutoUpdate.setText("Auto Update Sched Board");
        chkAutoUpdate.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        chkAutoUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkAutoUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSettingsLayout = new javax.swing.GroupLayout(panelSettings);
        panelSettings.setLayout(panelSettingsLayout);
        panelSettingsLayout.setHorizontalGroup(
            panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelSettingsLayout.createSequentialGroup()
                .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSettingsLayout.createSequentialGroup()
                        .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelSettingsLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cmbInstitute, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cmbDay, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(panelSettingsLayout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(panelSettingsLayout.createSequentialGroup()
                                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel5))
                                    .addGroup(panelSettingsLayout.createSequentialGroup()
                                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(panelSettingsLayout.createSequentialGroup()
                                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE))
                                    .addComponent(checkShowTooltip, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 11, Short.MAX_VALUE))
                    .addGroup(panelSettingsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnShowSched, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(chkAutoUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        panelSettingsLayout.setVerticalGroup(
            panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsLayout.createSequentialGroup()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cmbDay)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbInstitute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkAutoUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(btnShowSched, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(lblDate)
                .addGap(4, 4, 4)
                .addComponent(cal, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(checkShowTooltip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        scroll.setCursor(null);
        scroll.setBackground(new java.awt.Color(91, 91, 91));
        scroll.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(91, 91, 91)));
        scroll.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        scroll.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                scrollMouseWheelMoved(evt);
            }
        });
        scroll.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                scrollPropertyChange(evt);
            }
        });

        cont.setLayout(new java.awt.BorderLayout());

        jPanel2.setBackground(new java.awt.Color(91, 91, 91));

        jLabel7.setFont(new java.awt.Font("Segoe UI Semibold", 1, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Monday (Over All)");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 558, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel7)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cont, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scroll))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cont, javax.swing.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(scroll)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void checkShowTooltipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkShowTooltipActionPerformed
        board.setShowTooltip(checkShowTooltip.isSelected());
    }//GEN-LAST:event_checkShowTooltipActionPerformed

    private void btnShowSchedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowSchedActionPerformed
        if (d) {
            jLabel7.setText(cmbDay.getSelectedItem() + " (" + cmbInstitute.getSelectedItem() + ")");
            refreshBoard();
        }
    }//GEN-LAST:event_btnShowSchedActionPerformed

    private void chkAutoUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkAutoUpdateActionPerformed
        btnShowSched.setEnabled(!chkAutoUpdate.isSelected());
        btnShowSched.setVisible(!chkAutoUpdate.isSelected());
    }//GEN-LAST:event_chkAutoUpdateActionPerformed

    private void cmbDayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDayActionPerformed
        if (d) {
            selectedDay = cmbDay.getSelectedItem() != null ? cmbDay.getSelectedItem().toString() : selectedDay;
            if (chkAutoUpdate.isSelected()) {
                jLabel7.setText(cmbDay.getSelectedItem() + " (" + cmbInstitute.getSelectedItem() + ")");
                refreshBoard();
            }
        }
    }//GEN-LAST:event_cmbDayActionPerformed

    private void cmbInstituteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbInstituteActionPerformed
        if (d) {
            selectedInstitute = cmbInstitute.getSelectedItem() != null ? cmbInstitute.getSelectedItem().toString() : selectedInstitute;
            if (chkAutoUpdate.isSelected()) {
                jLabel7.setText(cmbDay.getSelectedItem() + " (" + cmbInstitute.getSelectedItem() + ")");
                refreshBoard();
                //change scroll ui
                //menu trans
                System.out.println("Height : " + scroll.getViewport().getSize().height + "\nWidth :" + scroll.getViewport().getSize().width);
            }
        }
    }//GEN-LAST:event_cmbInstituteActionPerformed

    private void scrollMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_scrollMouseWheelMoved
        board.changeHeaderPos(scroll.getVerticalScrollBar().getValue());
    }//GEN-LAST:event_scrollMouseWheelMoved

    private void scrollPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_scrollPropertyChange
         board.changeHeaderPos(scroll.getVerticalScrollBar().getValue());
    }//GEN-LAST:event_scrollPropertyChange

    public abstract void addScheduleRequest(List<ScheduleRequestData> srd, boolean isOwner, String owner, String room);

    public abstract void deleteSchedule(List<QueryData> qd);

    public void refreshBoard() {
        setModel(scheduleBoardUpdater.getSerializableModel(selectedInstitute, selectedDay));
    }

    public WebCheckBox getCheckShowTooltip() {
        return checkShowTooltip;
    }

    private void boardClicked(MouseEvent evt) {
        if (!instituteId.equals("N/A")) {
            if (board.getSelectedCell() != null && evt.getClickCount() == 2 && !evt.isMetaDown() && evt.getButton() != 2) {
                if (!board.getSelectedCell().hasSchedule()) {
                    pinNewSchedule();
                } else {
                    board.getSelectedCell().getSchedule().getBackupQueries().forEach(System.out::println);
                }
            } else if (board.getSelectedCell() != null & evt.isMetaDown()) {
                boolean hasSched = board.getSelectedCell().hasSchedule();
                menuPinSched.setVisible(!hasSched);
                menuRemoveSched.setVisible(hasSched);
                popup.show(board, evt.getX(), evt.getY());
                if (hasSched) {
                    menuRemoveSched.setEnabled(instituteId.equals("ADMIN")
                            || board.getSelectedCell().getSchedule().getInstituteId().equals(instituteId));
                }
            }
        }
    }

    private void pinNewSchedule() {
        List<Cell> cells = board.getSelectedRoom().getTime();
        List<String> ends = new ArrayList<>();
        test:
        for (int c = 0; c < cells.size(); c++) {
            if (cells.get(c).equals(board.getSelectedCell())) {
                while (c < cells.size()) {
                    if (!cells.get(c).hasSchedule()) {
                        ends.add(cells.get(c).getRowTime().split("-")[1]);
                        c++;
                    } else {
                        break test;
                    }
                }
            }
        }
        //for admin 
        if (instituteId.equals("ADMIN")) {
            String instIdSelected
                    = cmbInstitute.getSelectedItem().toString().equals("Over All")
                            ? InstituteChooser.showDialog(parent, scheduleBoardUpdater.getBlu().getListInstitutes())
                            : cmbInstitute.getSelectedItem().toString();
            if (!instIdSelected.isEmpty()) {
                List<ScheduleRequestData> srd
                        = AddSchedule.showDialog(parent, board.getSelectedCell().getRowTime(),
                                ends, board.getSelectedRoomTitle(), cmbDay.getSelectedItem().toString(),
                                instIdSelected, sy, scheduleBoardUpdater.getBlu(), true, "");
                if (!srd.isEmpty()) {
                    addScheduleRequest(srd, true, "", "");
                }
            }
        } else {
            boolean isOwner = scheduleBoardUpdater.getBlu().getListRooms().stream().
                    filter(r -> r.getId().equals(board.getSelectedRoomTitle())).
                    anyMatch(r -> r.getInstituteId().equals(instituteId));
            String owner = "";
            for (Classroom room : scheduleBoardUpdater.getBlu().getListRooms()) {
                if (room.getId().equals(board.getSelectedRoomTitle())) {
                    owner = room.getInstituteId();
                    break;
                }
            }
            List<ScheduleRequestData> srd
                    = AddSchedule.showDialog(parent, board.getSelectedCell().getRowTime(),
                            ends, board.getSelectedRoomTitle(), cmbDay.getSelectedItem().toString(),
                            instituteId, sy, scheduleBoardUpdater.getBlu(), isOwner, owner);
            if (!srd.isEmpty()) {
                addScheduleRequest(srd, isOwner, owner, board.getSelectedRoomTitle());
            }
        }

    }

    private void initPopups() {
        menuPinSched = new JMenuItem("Pin New Schedule", new ImageIcon(getClass().getResource("/artemis/img/pin_sched.png")));
        popup.add(menuPinSched);
        menuPinSched.addActionListener((ActionEvent e) -> {
            pinNewSchedule();
        });

        menuRemoveSched = new JMenuItem("Remove Schedule", new ImageIcon(getClass().getResource("/artemis/img/remove_sched.png")));
        popup.add(menuRemoveSched);
        menuRemoveSched.addActionListener((ActionEvent e) -> {
            if (ArtemisConfirm.showDialog(parent, "Confirm Delete", "Are you sure you want to delete this schedule?") != 0) {
                return;
            }
            List<QueryData> dataToDelete = new ArrayList<>();
            Schedule sched = board.getSelectedCell().getSchedule();
            String room = sched.getRoomId();
            String institute = sched.getInstituteId();
            String time = sched.getStartTime() + "-" + sched.getEndTime();
            String sess = sched.getSessionType();
            String qq = "Delete from class_sched where id = ";
            board.getSelectedCell().getSchedule().getId().forEach(i
                    -> dataToDelete.add(new QueryData(i.getId() + "", String.format("Remove room from %s(%s) having time %s (%s).",
                                            room, institute, time, sess), qq + i.getId() + ";"))
            );
            deleteSchedule(dataToDelete);
        });
    }

    public void setDayList(List<String> d) {
        cmbDay.removeAllItems();
        d.forEach(l -> cmbDay.addItem(l));
    }

    public ScheduleBoardUpdater getScheduleBoardUpdater() {
        return scheduleBoardUpdater;
    }

    public void updateScheduleBoardUpdater(ScheduleBoardUpdater scheduleBoardUpdater) {
        this.scheduleBoardUpdater = scheduleBoardUpdater;
        d = false;
        setInstituteList(scheduleBoardUpdater.getBlu().getListInstitutes());
        d = true;
        cmbDay.setSelectedItem(selectedDay);
        cmbInstitute.setSelectedItem(selectedInstitute);
        if (chkAutoUpdate.isSelected()) {
            refreshBoard();
        }
    }

    private void setInstituteList(List<String> i) {
        cmbInstitute.removeAllItems();
        cmbInstitute.addItem("Over All");
        i.forEach(l -> cmbInstitute.addItem(l));
    }

    private void setModel(List<SerializableModel> serializableModel) {
        board.setSerializableModel(serializableModel);
    }

    public String getSelectedDay() {
        if (cmbDay.getSelectedIndex() == -1) {
            System.out.println("Unidentified selection");
            return "";
        }
        return cmbDay.getSelectedItem() + "";
    }

    public String getSelectedInstitute() {
        if (cmbInstitute.getSelectedIndex() == -1) {
            System.out.println("Unidentified selection");
            return "";
        }
        return cmbInstitute.getSelectedItem() + "";
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.alee.laf.button.WebButton btnShowSched;
    private javax.swing.JPanel cal;
    private com.alee.laf.checkbox.WebCheckBox checkShowTooltip;
    private com.alee.laf.checkbox.WebCheckBox chkAutoUpdate;
    private javax.swing.JComboBox cmbDay;
    private javax.swing.JComboBox cmbInstitute;
    private javax.swing.JPanel cont;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel lblDate;
    private javax.swing.JPanel panelSettings;
    private javax.swing.JScrollPane scroll;
    // End of variables declaration//GEN-END:variables
}
